# ModSecurity Configuration

# Activer ModSecurity
SecRuleEngine On
SecRequestBodyAccess On
SecResponseBodyAccess off

# Paramètres de logging
SecAuditEngine RelevantOnly
SecAuditLog /var/log/modsecurity/modsec_audit.log
SecAuditLogType Serial
#SecAuditLogRelevantStatus "ACCEPT,REJECT"

SecDebugLog /var/log/modsecurity/modsec_debug.log
SecDebugLogLevel 4

# Chemin des règles CRS
#SecRuleInclude /etc/nginx/modsec/crs/*.conf
#SecRuleInclude /etc/nginx/modsec/crs/crs-setup.conf

# Paramètres de sécurité supplémentaires
SecResponseBodyMimeType (?-i:text/)
SecRequestBodyLimit 13107200
#SecRequestBodyInMemoryLimit 131072
#SecRequestBodyNoFilesLimit 10000

#include /etc/nginx/modsec/crs/*.conf

Include /crs/crs-setup.conf

## Log des requêtes bloquées
##SecAction "phase:1,pass,nolog,initcol:ip=%{REMOTE_ADDR},initcol:session=%{TX.session_id}"
#SecAction "phase:1,pass,nolog,initcol:ip=%{REMOTE_ADDR},initcol:global=session=%{TX.session_id}"

## Exemples de règles personnalisées :
#SecRule REQUEST_HEADERS:User-Agent "malicious" \
#    "id:1000,phase:1,deny,status:403,msg:'Malicious User-Agent Detected'"

## Option pour bloquer les attaques XSS
#SecRule ARGS|ARGS_NAMES|REQUEST_HEADERS|XML:/* "@rx <script" \
#    "id:2000,phase:2,deny,status:403,msg:'Cross-site scripting (XSS) attack detected'"

## Option pour bloquer les tentatives d'injection SQL
#SecRule ARGS|ARGS_NAMES|REQUEST_HEADERS|XML:/* "@rx select.*from.*user|union.*select.*from" \
#    "id:2001,phase:2,deny,status:403,msg:'SQL Injection attempt detected'"

## Autres options de configuration avancées pour renforcer la sécurité
#SecRule REQUEST_HEADERS:Host "@rx example.com" \
#    "id:2002,phase:1,deny,status:403,msg:'Forbidden Host Detected'"

## Sécuriser les fichiers de configuration
#SecRule REQUEST_HEADERS:User-Agent "curl" \
#    "id:3000,phase:1,deny,status:403,msg:'User-Agent curl is not allowed'"
